{"version":3,"sources":["components/Header.js","components/Exxxtra.js","components/InfoBox.js","components/MapboxGLMap.js","App.js","serviceWorker.js","index.js"],"names":["styles","height","width","padding","textAlign","fontSize","Header","style","Exxxtra","props","useState","setButtonClicked","navMenu","data","map","story","key","id","onClick","setCoordinates","coordinates","setFocus","console","log","title","InfoBox","focus","position","MapboxGLMap","setMap","backgroundLayerID","mapContainer","useRef","useEffect","mapboxgl","accessToken","process","Map","container","current","center","zoom","on","resize","initializeMap","setStyle","setCenter","ref","el","overflow","mapStyle","display","marte","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.be5dff8d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst styles = {\r\n    height: '60px',\r\n    width: '100vw',\r\n    padding: '10px',\r\n    textAlign: 'center',\r\n    fontSize: '30px',\r\n  };\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div style={styles}>\r\n            <header>Velkommen - til speedintervju m/ KarteMarte</header>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useState } from 'react'\r\nimport styles from './styles/styles.css'\r\n\r\nconst menuStyle = {\r\n    position: \"absolute\",\r\n    background: \"white\",\r\n    padding: 10,\r\n    zIndex: \"2\",\r\n    display: \"flex\",\r\n};\r\n\r\n\r\nconst Exxxtra = (props) => {\r\n    const [buttonClicked, setButtonClicked] = useState(null);\r\n\r\n    function onClick(story) {\r\n        setButtonClicked(story.id)\r\n        props.setCoordinates(story.data.coordinates);\r\n        props.setFocus(story);\r\n        console.log(story.data)\r\n    };\r\n    return (\r\n        <div>\r\n            <div style={styles.navMenu}>\r\n                {props.data.map((story) => (\r\n                    <div key={story.id}>\r\n                        <button onClick={() => onClick(story)}>\r\n                            {story.data.title}                            \r\n                        </button>\r\n                    </div>\r\n                ))}\r\n                \r\n                \r\n            </div>\r\n        </div>\r\n        )\r\n    \r\n}\r\n\r\nexport default Exxxtra\r\n","import React from 'react'\r\n\r\nconst styles = {\r\n    height: '280px',\r\n    width: '100px',\r\n    padding: '10px',\r\n    textAlign: 'center',\r\n    padding: 100,\r\n    fontSize: '15px',\r\n    zIndex: \"1\",\r\n    backgroundColor: 'white'\r\n  };\r\n\r\nconst InfoBox = (props) => {\r\n    return (\r\n        <div style={styles}>\r\n            <header>{props.focus.data.story}</header>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport Exxxtra from \"./Exxxtra\"\r\n\r\nconst styles = {\r\n  width: \"100%\",\r\n  height: \"calc(100vh - 80px)\",\r\n  position: \"absolute\"\r\n};\r\n\r\n\r\nconst MapboxGLMap = (props) => {\r\n  const [map, setMap] = useState(null);\r\n  const [backgroundLayerID, setbackgroundLayerID] = useState(\"streets-v11\");\r\n  const mapContainer = useRef(null);\r\n  //const [coordinates, setCoordinates] = useState([9.6555, 59.1386]);\r\n  const [selectedIndex, setIndex] = useState(null);\r\n\r\n\r\n  useEffect(() => {\r\n    mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_KEY;\r\n    const initializeMap = ({ setMap, mapContainer }) => {\r\n      const map = new mapboxgl.Map({\r\n        container: mapContainer.current,\r\n        style: \"mapbox://styles/mapbox/\" + backgroundLayerID, // stylesheet location\r\n        center: props.coordinates,\r\n        zoom: 10\r\n      });\r\n\r\n      map.on(\"load\", () => {\r\n        setMap(map);\r\n        map.resize();\r\n      });\r\n    };\r\n\r\n    if (!map) initializeMap({ setMap, mapContainer });\r\n    if (map) {\r\n      map.setStyle(\"mapbox://styles/mapbox/\" + backgroundLayerID);\r\n      // added: when button is clicked in Exxxtra, this will update the coordinates\r\n      map.setCenter(props.coordinates);\r\n    }\r\n\r\n  }, [backgroundLayerID, map, props]);\r\n\r\n  return (\r\n    <div>\r\n      <div ref={el => (mapContainer.current = el)} style={styles} />;\r\n    </div>\r\n  )\r\n    \r\n};\r\n\r\nexport default MapboxGLMap;","import React, { useState } from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport Exxxtra from \"./components/Exxxtra\";\r\nimport InfoBox from \"./components/InfoBox\";\r\nimport MapboxGLMap from \"./components/MapboxGLMap\";\r\n\r\nconst styles = {\r\n  overflow:'hidden'\r\n}\r\n\r\nconst mapStyle = {\r\n  display: 'flex',\r\n  \r\n}\r\n\r\nconst marte = \r\n[\r\n    {id: 1,\r\n    data: {\r\n        coordinates: [9.6555, 59.1386],\r\n        title: \"Hvor kommer jeg fra?\", \r\n        story: \"Heisann! Porsgrunn er min hjemby, og jeg er ei 22 år gammel jente, som alltid har likt realfag, logiske utfordringer og å få ting til å se bra ut - men først, få ting til å fungere\",\r\n    }},\r\n    {\r\n    id: 2,\r\n    data: {\r\n        coordinates: [11.5820, 48.1351],\r\n        title: \"Hvor har jeg vært det siste året?\", \r\n        story: \"Året 2019/2020: ERASMUS i München, Tyskland\",\r\n    }},\r\n    {\r\n      id: 3,\r\n      data: {\r\n        coordinates: [10.6793, 59.9228],\r\n        title: \"Hvor jobbet jeg sommeren 2019?\",\r\n        story: \"Summer Intern: Junior Software Developer - Tripletex AS\"\r\n      }\r\n    },\r\n    {id: 4,\r\n    data: {\r\n        coordinates: [10.408773,63.422091],\r\n        title: \"Hvor er jeg nå?\", \r\n        story: \"NTNU Gløshaugen, Ingeniørvitenskap & IKT - Geomatikk. 5.klasse, Master/prosjektoppgave: 3D scanning and reconstruction of Indoor Environments\",\r\n    }},\r\n];\r\n\r\nfunction App() {\r\n  const [coordinates, setCoordinates] = useState([9.6555, 59.1386]);\r\n  const [focus, setFocus] = useState(marte[0]);\r\n  return (\r\n    <div style={styles}>\r\n      <Header/>\r\n      <MapboxGLMap\r\n          coordinates={coordinates} />\r\n      <div style={mapStyle}>\r\n        <Exxxtra \r\n          setCoordinates={setCoordinates}\r\n          setFocus={setFocus}\r\n          data={marte}/>\r\n        <InfoBox\r\n          focus={focus}\r\n        />\r\n        \r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}